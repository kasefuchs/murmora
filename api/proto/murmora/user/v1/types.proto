// Copyright (c) Kasefuchs
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package murmora.user.v1;

import "murmora/common/v1/bitfield.proto";
import "murmora/common/v1/uuid.proto";
import "validate/validate.proto";

option go_package = "github.com/kasefuchs/murmora/api/proto/murmora/user/v1;user";

enum UserFlag {
  USER_FLAG_UNSPECIFIED = 0;
}

enum UserType {
  USER_TYPE_UNSPECIFIED = 0;
  USER_TYPE_STANDARD = 1;
}

message User {
  murmora.common.v1.UUID id = 1;
  UserType type = 2;
  string name = 3;
  string email = 4;
  murmora.common.v1.BitField flags = 5;
  bytes secret = 6;
}

message CreateUserRequest {
  UserType type = 1 [(validate.rules).enum = {
    not_in: [0]
  }];
  string name = 2 [(validate.rules).string = {
    min_len: 2
    max_len: 32
    pattern: "^[a-z0-9._]+$"
  }];
  string email = 3 [(validate.rules).string.email = true];
  murmora.common.v1.BitField flags = 4 [(validate.rules).message.required = true];
  bytes secret = 5 [(validate.rules).bytes.min_len = 1];
}

message CreateUserResponse {
  User user = 1;
}

message GetUserRequest {
  oneof query {
    option (validate.required) = true;

    murmora.common.v1.UUID id = 1 [(validate.rules).message.required = true];
    string name = 2 [(validate.rules).string = {
      min_len: 2
      max_len: 32
      pattern: "^[a-z0-9._]+$"
    }];
    string email = 3 [(validate.rules).string.email = true];
  }
}

message GetUserResponse {
  User user = 1;
}

// Copyright (c) Kasefuchs
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package murmora.token.v1;

import "google/protobuf/any.proto";
import "murmora/common/v1/jwt.proto";
import "murmora/common/v1/uuid.proto";
import "validate/validate.proto";

option go_package = "github.com/kasefuchs/murmora/api/proto/murmora/token/v1;token";

message TokenWithID {
  murmora.common.v1.UUID id = 1 [(validate.rules).message.required = true];
  murmora.common.v1.JWT token = 2 [(validate.rules).message.required = true];
}

message TokenWithSecret {
  murmora.common.v1.JWT token = 1 [(validate.rules).message.required = true];
  bytes secret = 2 [(validate.rules).bytes.min_len = 32];
}

message TokenData {
  murmora.common.v1.UUID id = 1 [(validate.rules).message.required = true];
  google.protobuf.Any payload = 2 [(validate.rules).any.required = true];
}

message SignTokenRequest {
  murmora.common.v1.UUID id = 1 [(validate.rules).message.required = true];
  bytes secret = 2 [(validate.rules).bytes.min_len = 32];
}

message SignTokenResponse {
  TokenWithID result = 1;
}

message CreateTokenRequest {
  google.protobuf.Any payload = 1 [(validate.rules).any.required = true];
  bytes secret = 2 [(validate.rules).bytes.min_len = 32];
}

message CreateTokenResponse {
  TokenWithID result = 1;
}

message ValidateTokenRequest {
  TokenWithSecret data = 1 [(validate.rules).message.required = true];
}

message ValidateTokenResponse {
  murmora.common.v1.UUID id = 1;
}

message GetTokenDataRequest {
  murmora.common.v1.JWT token = 1 [(validate.rules).message.required = true];
}

message GetTokenDataResponse {
  TokenData data = 1;
}

message GetValidatedTokenDataRequest {
  TokenWithSecret data = 1 [(validate.rules).message.required = true];
}

message GetValidatedTokenDataResponse {
  TokenData data = 1;
}
